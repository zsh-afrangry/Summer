services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend-dev
    ports:
      - "9001:3000"  # 避免端口冲突，映射到9001
    volumes:
      - ./frontend/src:/app/src  # 挂载源代码，支持热更新
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/vue.config.js:/app/vue.config.js
      - ./frontend/babel.config.js:/app/babel.config.js
      - frontend-node-modules:/app/node_modules  # 独立的node_modules卷
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: backend-dev
    ports:
      - "9000:8080"
    volumes:
      - ./backend/src:/app/src
      - ./backend/pom.xml:/app/pom.xml
      - backend-m2:/root/.m2
    depends_on:
      mysql:
        condition: service_healthy

  mysql:
    image: mysql:5.7
    container_name: mysql-dev
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: my_blog
    ports:
      - "3307:3306"
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
      - mysql-dev-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      timeout: 10s
      retries: 10
      interval: 5s
      start_period: 30s

  nginx:
    image: nginx:latest
    container_name: nginx-dev
    ports:
      - "8080:80"  # 使用不同端口避免冲突
    volumes:
      - ./nginx/nginx-dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend

volumes:
  frontend-node-modules:
  mysql-dev-data:
  backend-m2: