# ================================
# Docker 基础命令
# ================================

# 在前台启动所有服务并显示日志 ，调试，查看启动过程
docker compose up

# （最常用）在后台启动所有服务，用于日常运行，部署
docker compose up -d

# 重新构建镜像并在后台启动，用于代码或Dockerfile更新后
docker compose up --build -d

# 只构建镜像，不启动，用于预先准备镜像
docker compose build

# 查看所有服务状态
docker compose ps

# 查看服务日志
docker compose logs [service-name]

# 停止所有服务
docker compose down

# 重启服务
docker compose restart [service-name]

# 查看特定服务日志
docker compose logs backend
docker compose logs frontend
docker compose logs mysql
docker compose logs nginx

# ================================
# 本地开发最佳实践
# ================================

# 1. 快速开发流程（推荐）- 只重建前端
# 前端代码修改后，只重建前端服务（节省时间）
docker compose up --build frontend -d
docker compose restart nginx

# 2. 超快速开发（热更新）- 使用开发配置
# 支持实时热更新，代码修改立即生效
docker compose -f docker-compose.dev.yml up -d

# 3. 传统完整重建（耗时较长）
# 修改代码后，强制重新构建并启动所有服务
docker compose up --build -d

# 2. 开发调试
# 前台启动，查看实时日志（适合调试）
docker compose up --build

# 3. 完全重置环境
# 停止服务 -> 清理系统 -> 重新构建启动
docker compose down
docker system prune -f
docker compose up --build -d

# 4. 清理无用资源
# 清理未使用的镜像、容器、网络
docker system prune -a -f

# 5. 删除特定镜像重建
# 当镜像有问题时，删除后重建
docker rmi afrangry/summer-frontend:latest afrangry/summer-backend:latest
docker compose up --build -d

# 6. 查看容器内部
# 进入容器内部调试
docker exec -it frontend /bin/sh
docker exec -it backend /bin/bash
docker exec -it mysql mysql -uroot -proot

# ================================
# 常见问题解决
# ================================

# 问题1: 代码修改后Docker没有更新
# 解决方案A: 只重建前端（快速，推荐）
docker compose up --build frontend -d && docker compose restart nginx
# 解决方案B: 使用开发模式（热更新）
docker compose -f docker-compose.dev.yml up -d
# 解决方案C: 完整重建（慢）
docker compose up --build -d

# 问题2: 端口被占用
# 解决: 检查端口占用并停止相关服务
netstat -ano | findstr :80
netstat -ano | findstr :9000
netstat -ano | findstr :3307

# 问题3: 数据库连接失败
# 解决: 检查MySQL容器状态和日志
docker compose logs mysql
docker exec -it mysql mysql -uroot -proot -e "SHOW DATABASES;"

# 问题4: 前端页面无法访问
# 解决: 检查Nginx和前端容器状态
docker compose logs nginx
docker compose logs frontend

# ================================
# 环境区分
# ================================

# 测试环境（本地开发）
docker compose up --build -d

# 生产环境部署
docker compose -f docker-compose.prod.yml up -d

# ================================
# 性能优化建议
# ================================

# 1. 定期清理无用资源
docker system prune -a -f

# 2. 使用 .dockerignore 文件减少构建上下文
# 3. 合理设置资源限制
# 4. 使用多阶段构建优化镜像大小